group = g),
colour = "black",
size = 1.5,
arrow = arrow(length = unit(0.15, "cm"))) +
theme_bw() +
ylab('SD') +
xlab('Mean') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
unique(plot_df$g)
plot_df <- plot_df %>%
filter(str_detect(g, 'InequalityD=Positive|FragilityD=Negative|DemocracyD=Positive'))
plot_df_agg <- plot_df_agg %>%
filter(str_detect(g, 'InequalityD=Positive|FragilityD=Negative|DemocracyD=Positive'))
ggplot(plot_df, aes(mean, sd, g)) +
facet_grid(D_event~predictor) +
geom_path(data = plot_df, aes(x = mean, y = sd,
group = g),
colour = "grey70",
arrow = arrow(length = unit(0.15, "cm"))) +
geom_path(data = plot_df_agg, aes(x = mean,
y = sd,
group = g),
colour = "black",
size = 1.5,
arrow = arrow(length = unit(0.15, "cm"))) +
theme_bw() +
ylab('SD') +
xlab('Mean') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(plot_df, aes(mean, sd, g)) +
facet_wrap(~predictor) +
geom_path(data = plot_df, aes(x = mean, y = sd,
group = g),
colour = "grey70",
arrow = arrow(length = unit(0.15, "cm"))) +
geom_path(data = plot_df_agg, aes(x = mean,
y = sd,
group = g),
colour = "black",
size = 1.5,
arrow = arrow(length = unit(0.15, "cm"))) +
theme_bw() +
ylab('SD') +
xlab('Mean') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
plot_df <- plot_df %>%
filter(str_detect(g, 'InequalityD=Positive|FragilityD=Negative|DemocracyD=Positive')) %>%
mutate(predictor = paste(predictor, '\n(observed correlation is ', tolower(substr(D_event), 3, 100)))
plot_df <- plot_df %>%
ungroup() %>%
filter(str_detect(g, 'InequalityD=Positive|FragilityD=Negative|DemocracyD=Positive')) %>%
mutate(predictor = paste(predictor, '\n(observed correlation is ', tolower(substr(D_event), 3, 100)))
plot_df <- plot_df %>%
ungroup() %>%
filter(str_detect(g, 'InequalityD=Positive|FragilityD=Negative|DemocracyD=Positive')) %>%
mutate(predictor = paste(predictor, '\n(observed correlation is ', tolower(substr(D_event, 3, 100))))
plot_df_agg <- plot_df_agg %>%
ungroup() %>%
filter(str_detect(g, 'InequalityD=Positive|FragilityD=Negative|DemocracyD=Positive'))%>%
mutate(predictor = paste(predictor, '\n(observed correlation is ', tolower(substr(D_event, 3, 100))))
ggplot(plot_df, aes(mean, sd, g)) +
facet_wrap(~predictor) +
geom_path(data = plot_df, aes(x = mean, y = sd,
group = g),
colour = "grey70",
arrow = arrow(length = unit(0.15, "cm"))) +
geom_path(data = plot_df_agg, aes(x = mean,
y = sd,
group = g),
colour = "black",
size = 1.5,
arrow = arrow(length = unit(0.15, "cm"))) +
theme_bw() +
ylab('SD') +
xlab('Mean') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#### Big reshape
df2  <- read_csv('../../priors_survey/raw_data/covid correlates priors - Final_September 3, 2020_09.58.csv', skip = 2)
vlabs <- read_excel('../../priors_survey/varlabs.xlsx') %>%
filter(!is.na(newlab)) %>%
dplyr::select(-label)
## Change colnames
colnames(df2) <- dplyr::recode(
colnames(df2),
!!!setNames(as.character(vlabs$newlab), vlabs$varlab2))
## Drop unreplaced colname
df2 <- df2 %>% dplyr::select(one_of(vlabs$newlab)) %>%
mutate(uid = 1:n())
df_long <- df2 %>%
dplyr::select(matches('sfrag|democ|ineq'),
uid, progress) %>%
pivot_longer(cols = -c('uid', 'progress')) %>%
left_join(vlabs %>%
dplyr::select(newlab, 5:9),
by = c('name' = 'newlab')) %>%
dplyr::select(-controls_effect) %>%
dplyr::select(-name) %>%
mutate(prob = case_when(type_effect == 'Correlation' & true_direction_effect == 'not given' ~ 'P_D',
type_effect == 'Correlation' & true_direction_effect != 'not given' ~ 'P_D_H',
type_effect == 'Causal' ~ 'P_H')) %>%
dplyr::select(uid, progress, value, direction_effect,
predictor, prob, true_direction_effect,
type_effect) %>%
pivot_wider(id_cols = c('uid', 'progress',
'direction_effect',
'predictor',
'true_direction_effect',
'type_effect'),
values_from = 'value', names_from = 'prob') %>%
mutate(true_direction_effect = recode(true_direction_effect,
`pos` = 'Positive',
`neg` = 'Negative',
`none` = 'None')) %>%
mutate(true_direction_effect = ifelse(type_effect == 'Causal',
direction_effect,
true_direction_effect)) %>%
group_by(uid, true_direction_effect, predictor) %>%
mutate(P_H = first(P_H[!is.na(P_H)])) %>%
ungroup() %>%
group_by(uid, direction_effect, predictor) %>%
mutate(P_D = first(P_D[!is.na(P_D)])) %>%
ungroup() %>%
filter(!is.na(P_H) & !is.na(P_D_H) & !is.na(P_D)) %>%
mutate(P_H = P_H / 100,
P_D = P_D / 100,
P_D_H = P_D_H / 100) %>%
mutate(H_event = paste0('H=', true_direction_effect),
D_event = paste0('D=', direction_effect)) %>%
mutate(posterior_expression = paste0('P(', H_event, '|', D_event, ')')) %>%
mutate(predictor = recode(predictor,
`fragility` = 'Fragility',
`democracy` = 'Democracy',
`inequality` = 'Inequality')) %>%
mutate(P_D_H_times_P_H = P_D_H * P_H) %>%
group_by(uid, predictor, D_event) %>%
mutate(denom = sum(P_D_H_times_P_H)) %>%
mutate(H_value = case_when(H_event == 'H=Positive' ~ 1,
H_event == 'H=Negative' ~ -1,
H_event == 'H=None' ~ 0)) %>%
## Posteriors
mutate(P_H_D = (P_D_H*P_H) / denom) %>%
filter(progress > 90) %>%
mutate(P_H_D = ifelse(is.nan(P_H_D), NA, P_H_D))
## Graph:: All respondents
plot_df <- df_long %>%
dplyr::select(P_H, P_H_D, predictor, D_event, uid, H_value) %>%
filter(!is.na(P_H_D)) %>%
arrange(uid, predictor, D_event) %>%
group_by(uid, predictor, D_event) %>%
summarise(post_mean = weighted.mean(x = H_value, w = P_H_D, na.rm = T),
post_sd = radiant.data::weighted.sd(x = H_value, wt = P_H_D, na.rm = T),
prior_mean = weighted.mean(x = H_value, w = P_H, na.rm = T),
prior_sd =  radiant.data::weighted.sd(x = H_value, wt = P_H, na.rm = T)) %>%
pivot_longer(cols = c(post_mean,
post_sd,
prior_mean,
prior_sd), names_sep = '_', names_to = c('a', 'b')) %>%
pivot_wider(names_from = b, values_from = value) %>%
mutate(g= paste0(uid, predictor, D_event)) %>%
arrange(predictor, D_event, desc(a))
## Graph
plot_df_agg <- df_long %>%
filter(!is.na(P_H_D)) %>%
arrange(uid, predictor, D_event) %>%
group_by(uid, predictor, D_event) %>%
summarise(post_mean = weighted.mean(x = H_value, w = P_H_D, na.rm = T),
post_sd = weighted.sd(x = H_value, wt = P_H_D, na.rm = T),
prior_mean = weighted.mean(x = H_value, w = P_H, na.rm = T),
prior_sd = weighted.sd(x = H_value, wt = P_H, na.rm = T)) %>%
group_by(predictor, D_event) %>%
summarise(post_mean = mean(post_mean),
post_sd = mean(post_sd),
prior_mean = mean(prior_mean),
prior_sd = mean(prior_sd)) %>%
pivot_longer(cols = c(post_mean,
post_sd,
prior_mean,
prior_sd), names_sep = '_', names_to = c('a', 'b')) %>%
pivot_wider(names_from = b, values_from = value) %>%
mutate(g= paste0(predictor, D_event)) %>%
arrange(predictor, D_event, desc(a))
## Only show what we find
plot_df <- plot_df %>%
ungroup() %>%
filter(str_detect(g, 'InequalityD=Positive|FragilityD=Negative|DemocracyD=Positive')) %>%
mutate(predictor = paste0(predictor, '\n(observed correlation is ', tolower(substr(D_event, 3, 100))))
plot_df_agg <- plot_df_agg %>%
ungroup() %>%
filter(str_detect(g, 'InequalityD=Positive|FragilityD=Negative|DemocracyD=Positive'))%>%
mutate(predictor = paste0(predictor, '\n(observed correlation is ', tolower(substr(D_event, 3, 100))))
## ## ##
## Combined
ggplot(plot_df, aes(mean, sd, g)) +
facet_wrap(~predictor) +
geom_path(data = plot_df, aes(x = mean, y = sd,
group = g),
colour = "grey70",
arrow = arrow(length = unit(0.15, "cm"))) +
geom_path(data = plot_df_agg, aes(x = mean,
y = sd,
group = g),
colour = "black",
size = 1.5,
arrow = arrow(length = unit(0.15, "cm"))) +
theme_bw() +
ylab('SD') +
xlab('Mean') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#### Big reshape
df2  <- read_csv('../../priors_survey/raw_data/covid correlates priors - Final_September 3, 2020_09.58.csv', skip = 2)
vlabs <- read_excel('../../priors_survey/varlabs.xlsx') %>%
filter(!is.na(newlab)) %>%
dplyr::select(-label)
## Change colnames
colnames(df2) <- dplyr::recode(
colnames(df2),
!!!setNames(as.character(vlabs$newlab), vlabs$varlab2))
## Drop unreplaced colname
df2 <- df2 %>% dplyr::select(one_of(vlabs$newlab)) %>%
mutate(uid = 1:n())
df_long <- df2 %>%
dplyr::select(matches('sfrag|democ|ineq'),
uid, progress) %>%
pivot_longer(cols = -c('uid', 'progress')) %>%
left_join(vlabs %>%
dplyr::select(newlab, 5:9),
by = c('name' = 'newlab')) %>%
dplyr::select(-controls_effect) %>%
dplyr::select(-name) %>%
mutate(prob = case_when(type_effect == 'Correlation' & true_direction_effect == 'not given' ~ 'P_D',
type_effect == 'Correlation' & true_direction_effect != 'not given' ~ 'P_D_H',
type_effect == 'Causal' ~ 'P_H')) %>%
dplyr::select(uid, progress, value, direction_effect,
predictor, prob, true_direction_effect,
type_effect) %>%
pivot_wider(id_cols = c('uid', 'progress',
'direction_effect',
'predictor',
'true_direction_effect',
'type_effect'),
values_from = 'value', names_from = 'prob') %>%
mutate(true_direction_effect = recode(true_direction_effect,
`pos` = 'Positive',
`neg` = 'Negative',
`none` = 'None')) %>%
mutate(true_direction_effect = ifelse(type_effect == 'Causal',
direction_effect,
true_direction_effect)) %>%
group_by(uid, true_direction_effect, predictor) %>%
mutate(P_H = first(P_H[!is.na(P_H)])) %>%
ungroup() %>%
group_by(uid, direction_effect, predictor) %>%
mutate(P_D = first(P_D[!is.na(P_D)])) %>%
ungroup() %>%
filter(!is.na(P_H) & !is.na(P_D_H) & !is.na(P_D)) %>%
mutate(P_H = P_H / 100,
P_D = P_D / 100,
P_D_H = P_D_H / 100) %>%
mutate(H_event = paste0('H=', true_direction_effect),
D_event = paste0('D=', direction_effect)) %>%
mutate(posterior_expression = paste0('P(', H_event, '|', D_event, ')')) %>%
mutate(predictor = recode(predictor,
`fragility` = 'Fragility',
`democracy` = 'Democracy',
`inequality` = 'Inequality')) %>%
mutate(P_D_H_times_P_H = P_D_H * P_H) %>%
group_by(uid, predictor, D_event) %>%
mutate(denom = sum(P_D_H_times_P_H)) %>%
mutate(H_value = case_when(H_event == 'H=Positive' ~ 1,
H_event == 'H=Negative' ~ -1,
H_event == 'H=None' ~ 0)) %>%
## Posteriors
mutate(P_H_D = (P_D_H*P_H) / denom) %>%
filter(progress > 90) %>%
mutate(P_H_D = ifelse(is.nan(P_H_D), NA, P_H_D))
## Graph:: All respondents
plot_df <- df_long %>%
dplyr::select(P_H, P_H_D, predictor, D_event, uid, H_value) %>%
filter(!is.na(P_H_D)) %>%
arrange(uid, predictor, D_event) %>%
group_by(uid, predictor, D_event) %>%
summarise(post_mean = weighted.mean(x = H_value, w = P_H_D, na.rm = T),
post_sd = radiant.data::weighted.sd(x = H_value, wt = P_H_D, na.rm = T),
prior_mean = weighted.mean(x = H_value, w = P_H, na.rm = T),
prior_sd =  radiant.data::weighted.sd(x = H_value, wt = P_H, na.rm = T)) %>%
pivot_longer(cols = c(post_mean,
post_sd,
prior_mean,
prior_sd), names_sep = '_', names_to = c('a', 'b')) %>%
pivot_wider(names_from = b, values_from = value) %>%
mutate(g= paste0(uid, predictor, D_event)) %>%
arrange(predictor, D_event, desc(a))
## Graph
plot_df_agg <- df_long %>%
filter(!is.na(P_H_D)) %>%
arrange(uid, predictor, D_event) %>%
group_by(uid, predictor, D_event) %>%
summarise(post_mean = weighted.mean(x = H_value, w = P_H_D, na.rm = T),
post_sd = weighted.sd(x = H_value, wt = P_H_D, na.rm = T),
prior_mean = weighted.mean(x = H_value, w = P_H, na.rm = T),
prior_sd = weighted.sd(x = H_value, wt = P_H, na.rm = T)) %>%
group_by(predictor, D_event) %>%
summarise(post_mean = mean(post_mean),
post_sd = mean(post_sd),
prior_mean = mean(prior_mean),
prior_sd = mean(prior_sd)) %>%
pivot_longer(cols = c(post_mean,
post_sd,
prior_mean,
prior_sd), names_sep = '_', names_to = c('a', 'b')) %>%
pivot_wider(names_from = b, values_from = value) %>%
mutate(g= paste0(predictor, D_event)) %>%
arrange(predictor, D_event, desc(a))
## Only show what we find
plot_df <- plot_df %>%
ungroup() %>%
filter(str_detect(g, 'InequalityD=Positive|FragilityD=Negative|DemocracyD=Positive')) %>%
mutate(predictor = paste0(predictor, '\n(observed correlation is ', tolower(substr(D_event, 3, 100))))
plot_df_agg <- plot_df_agg %>%
ungroup() %>%
filter(str_detect(g, 'InequalityD=Positive|FragilityD=Negative|DemocracyD=Positive'))%>%
mutate(predictor = paste0(predictor, '\n(observed correlation is ', tolower(substr(D_event, 3, 100))))
## ## ##
## Combined
ggplot(plot_df, aes(mean, sd, g)) +
facet_wrap(~predictor) +
geom_path(data = plot_df, aes(x = mean, y = sd,
group = g),
colour = "grey70",
arrow = arrow(length = unit(0.15, "cm"))) +
geom_path(data = plot_df_agg, aes(x = mean,
y = sd,
group = g),
colour = "black",
size = 1.5,
arrow = arrow(length = unit(0.15, "cm"))) +
theme_bw() +
ylab('SD') +
xlab('Mean') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#### Big reshape
df2  <- read_csv('../../priors_survey/raw_data/covid correlates priors - Final_September 3, 2020_09.58.csv', skip = 2)
vlabs <- read_excel('../../priors_survey/varlabs.xlsx') %>%
filter(!is.na(newlab)) %>%
dplyr::select(-label)
## Change colnames
colnames(df2) <- dplyr::recode(
colnames(df2),
!!!setNames(as.character(vlabs$newlab), vlabs$varlab2))
## Drop unreplaced colname
df2 <- df2 %>% dplyr::select(one_of(vlabs$newlab)) %>%
mutate(uid = 1:n())
df_long <- df2 %>%
dplyr::select(matches('sfrag|democ|ineq'),
uid, progress) %>%
pivot_longer(cols = -c('uid', 'progress')) %>%
left_join(vlabs %>%
dplyr::select(newlab, 5:9),
by = c('name' = 'newlab')) %>%
dplyr::select(-controls_effect) %>%
dplyr::select(-name) %>%
mutate(prob = case_when(type_effect == 'Correlation' & true_direction_effect == 'not given' ~ 'P_D',
type_effect == 'Correlation' & true_direction_effect != 'not given' ~ 'P_D_H',
type_effect == 'Causal' ~ 'P_H')) %>%
dplyr::select(uid, progress, value, direction_effect,
predictor, prob, true_direction_effect,
type_effect) %>%
pivot_wider(id_cols = c('uid', 'progress',
'direction_effect',
'predictor',
'true_direction_effect',
'type_effect'),
values_from = 'value', names_from = 'prob') %>%
mutate(true_direction_effect = recode(true_direction_effect,
`pos` = 'Positive',
`neg` = 'Negative',
`none` = 'None')) %>%
mutate(true_direction_effect = ifelse(type_effect == 'Causal',
direction_effect,
true_direction_effect)) %>%
group_by(uid, true_direction_effect, predictor) %>%
mutate(P_H = first(P_H[!is.na(P_H)])) %>%
ungroup() %>%
group_by(uid, direction_effect, predictor) %>%
mutate(P_D = first(P_D[!is.na(P_D)])) %>%
ungroup() %>%
filter(!is.na(P_H) & !is.na(P_D_H) & !is.na(P_D)) %>%
mutate(P_H = P_H / 100,
P_D = P_D / 100,
P_D_H = P_D_H / 100) %>%
mutate(H_event = paste0('H=', true_direction_effect),
D_event = paste0('D=', direction_effect)) %>%
mutate(posterior_expression = paste0('P(', H_event, '|', D_event, ')')) %>%
mutate(predictor = recode(predictor,
`fragility` = 'Fragility',
`democracy` = 'Democracy',
`inequality` = 'Inequality')) %>%
mutate(P_D_H_times_P_H = P_D_H * P_H) %>%
group_by(uid, predictor, D_event) %>%
mutate(denom = sum(P_D_H_times_P_H)) %>%
mutate(H_value = case_when(H_event == 'H=Positive' ~ 1,
H_event == 'H=Negative' ~ -1,
H_event == 'H=None' ~ 0)) %>%
## Posteriors
mutate(P_H_D = (P_D_H*P_H) / denom) %>%
filter(progress > 90) %>%
mutate(P_H_D = ifelse(is.nan(P_H_D), NA, P_H_D))
## Graph:: All respondents
plot_df <- df_long %>%
dplyr::select(P_H, P_H_D, predictor, D_event, uid, H_value) %>%
filter(!is.na(P_H_D)) %>%
arrange(uid, predictor, D_event) %>%
group_by(uid, predictor, D_event) %>%
summarise(post_mean = weighted.mean(x = H_value, w = P_H_D, na.rm = T),
post_sd = radiant.data::weighted.sd(x = H_value, wt = P_H_D, na.rm = T),
prior_mean = weighted.mean(x = H_value, w = P_H, na.rm = T),
prior_sd =  radiant.data::weighted.sd(x = H_value, wt = P_H, na.rm = T)) %>%
pivot_longer(cols = c(post_mean,
post_sd,
prior_mean,
prior_sd), names_sep = '_', names_to = c('a', 'b')) %>%
pivot_wider(names_from = b, values_from = value) %>%
mutate(g= paste0(uid, predictor, D_event)) %>%
arrange(predictor, D_event, desc(a))
## Graph
plot_df_agg <- df_long %>%
filter(!is.na(P_H_D)) %>%
arrange(uid, predictor, D_event) %>%
group_by(uid, predictor, D_event) %>%
summarise(post_mean = weighted.mean(x = H_value, w = P_H_D, na.rm = T),
post_sd = weighted.sd(x = H_value, wt = P_H_D, na.rm = T),
prior_mean = weighted.mean(x = H_value, w = P_H, na.rm = T),
prior_sd = weighted.sd(x = H_value, wt = P_H, na.rm = T)) %>%
group_by(predictor, D_event) %>%
summarise(post_mean = mean(post_mean),
post_sd = mean(post_sd),
prior_mean = mean(prior_mean),
prior_sd = mean(prior_sd)) %>%
pivot_longer(cols = c(post_mean,
post_sd,
prior_mean,
prior_sd), names_sep = '_', names_to = c('a', 'b')) %>%
pivot_wider(names_from = b, values_from = value) %>%
mutate(g= paste0(predictor, D_event)) %>%
arrange(predictor, D_event, desc(a))
## Only show what we find
plot_df <- plot_df %>%
ungroup() %>%
filter(str_detect(g, 'InequalityD=Positive|FragilityD=Negative|DemocracyD=Positive')) %>%
mutate(predictor = paste0(predictor, '\n(observed correlation is ', tolower(substr(D_event, 3, 100)), ')'))
plot_df_agg <- plot_df_agg %>%
ungroup() %>%
filter(str_detect(g, 'InequalityD=Positive|FragilityD=Negative|DemocracyD=Positive'))%>%
mutate(predictor = paste0(predictor, '\n(observed correlation is ', tolower(substr(D_event, 3, 100)), ')'))
## ## ##
## Combined
ggplot(plot_df, aes(mean, sd, g)) +
facet_wrap(~predictor) +
geom_path(data = plot_df, aes(x = mean, y = sd,
group = g),
colour = "grey70",
arrow = arrow(length = unit(0.15, "cm"))) +
geom_path(data = plot_df_agg, aes(x = mean,
y = sd,
group = g),
colour = "black",
size = 1.5,
arrow = arrow(length = unit(0.15, "cm"))) +
theme_bw() +
ylab('SD of belief') +
xlab('Mean of velief') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
comment = NA)
check.packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE,
repos = "https://cran.rstudio.com")
sapply(pkg, require, character.only = TRUE)
}
pkgList <- c("RCurl","WDI","readxl","httr","knitr","tidyverse",
"estimatr","stargazer","countrycode","dataverse",
"zip", "lubridate", "rvest", "fastDummies", "lfe",
"zoo","rvest","data.table", "pbapply", "xml2",
"manifestoR", "devtools", "readxl", "httr", "foreign")
check.packages(pkgList)
library(vdemdata)
4560/2
2500 - 642.25
2500 - 642.25
library(devtools)
library(roxygen2)
rm(list = ls())
## Declare WDs
wd_h <- '/Users/hanno/Local_Projects/haschaR/'
wd_s <- '/Users/saschariaz/Google\ Drive_Harvard/Git/haschaR'
## Set WD
haschaR::detect_wd(wd_h = wd_h, wd_alt = wd_s, user_name = 'Hanno')
document()
REINSTALLING
devtools::install_github('https://github.com/hhilbig/haschaR',
force = T, upgrade = T)

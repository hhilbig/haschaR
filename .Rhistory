library(ggplot2)
# Generate synthetic data
set.seed(123)
n <- 1000
## preparation
p <- rnorm(100, 0, 1)
## gre
gre <- sample(130:170, 100, replace = T)
## standardize gre
gre <- (gre - mean(gre)) / sd(gre)
## add together
total = gre + p
admit = (total > quantile(total, 0.75))
outcome = gre + p + rnorm(100, 0, 1)
## plot
plot(gre, outcome)
cor(gre, outcome)
cor(gre[admit == 1], outcome[admit == 1])
# Install ggplot2 if not installed
# install.packages("ggplot2")
# Load ggplot2 package
library(ggplot2)
# Generate synthetic data
set.seed(123)
n <- 1000
## preparation
p <- rnorm(100, 0, 1)
## gre
gre <- sample(130:170, 100, replace = T)
## standardize gre
gre <- (gre - mean(gre)) / sd(gre)
## add together
total = gre + p
admit = (total > quantile(total, 0.75))
outcome = gre + p + rnorm(100, 0, 1)
## plot
plot(gre, outcome)
cor(gre, outcome)
cor(gre[admit == 1], outcome[admit == 1])
# Install ggplot2 if not installed
# install.packages("ggplot2")
# Load ggplot2 package
library(ggplot2)
# Generate synthetic data
set.seed(123)
n <- 1000
## preparation
p <- rnorm(100, 0, 1)
## gre
gre <- sample(130:170, 100, replace = T)
## standardize gre
gre <- (gre - mean(gre)) / sd(gre)
## add together
total = gre + p
admit = (total > quantile(total, 0.75))
outcome = gre + p + rnorm(100, 0, 1)
## plot
plot(gre, outcome)
cor(gre, outcome)
cor(gre[admit == 1], outcome[admit == 1])
# Install ggplot2 if not installed
# install.packages("ggplot2")
# Load ggplot2 package
library(ggplot2)
# Generate synthetic data
set.seed(123)
n <- 1000
## preparation
p <- rnorm(100, 0, 1)
## gre
gre <- sample(130:170, 100, replace = T)
## standardize gre
gre <- (gre - mean(gre)) / sd(gre)
## add together
total = gre + p
admit = (total > quantile(total, 0.75))
outcome = gre + p + rnorm(100, 0, 1)
## plot
plot(gre, outcome)
cor(gre, outcome)
cor(gre[admit == 1], outcome[admit == 1])
# Install ggplot2 if not installed
# install.packages("ggplot2")
# Load ggplot2 package
library(ggplot2)
# Generate synthetic data
set.seed(123)
n <- 1000
## preparation
p <- rnorm(100, 0, 1)
## gre
gre <- sample(130:170, 100, replace = T)
## standardize gre
gre <- (gre - mean(gre)) / sd(gre)
## add together
total = gre + p
admit = (total > quantile(total, 0.75))
outcome = gre + p + rnorm(100, 0, 1)
## plot
plot(gre, outcome)
cor(gre, outcome)
cor(gre[admit == 1], outcome[admit == 1])
# Install ggplot2 if not installed
# install.packages("ggplot2")
# Load ggplot2 package
library(ggplot2)
# Generate synthetic data
set.seed(123)
n <- 1000
## preparation
p <- rnorm(n, 0, 1)
## gre
gre <- sample(130:170, n, replace = T)
## standardize gre
gre <- (gre - mean(gre)) / sd(gre)
## add together
total = gre + p
admit = (total > quantile(total, 0.75))
outcome = gre + p + rnorm(n, 0, 1)
## plot
plot(gre, outcome)
cor(gre, outcome)
cor(gre[admit == 1], outcome[admit == 1])
df <- data.frame(gre, total, admit, p, outcome)
df
ggplot(df, aes(gre, outcome, admit)) +
geom_point(aes(color = admit)) +
geom_smooth(method = 'lm', aes(group = admit))
ggplot(df, aes(gre, outcome))
ggplot(df, aes(gre, outcome)) +
geom_point()+
geom_smooth(method = 'lm')
ggplot(df, aes(gre, outcome)) +
geom_point(alpha = 0.5)+
geom_smooth(method = 'lm')
ggplot(df, aes(gre, outcome)) +
geom_point(alpha = 0.3)+
geom_smooth(method = 'lm')
ggplot(df, aes(gre, outcome)) +
geom_point(alpha = 0.3)+
geom_smooth(method = 'lm') +
haschaR::theme_hanno()
# Install ggplot2 if not installed
# install.packages("ggplot2")
# Load ggplot2 package
library(ggplot2)
# Generate synthetic data
set.seed(123)
n <- 1000
## preparation
p <- rnorm(n, 0, 1)
## gre
gre <- sample(130:170, n, replace = T)
## standardize gre
gre_scaled <- (gre - mean(gre)) / sd(gre)
## add together
total = gre_scaled + p
admit = (total > quantile(total, 0.75))
outcome = gre_scaled + p + rnorm(n, 0, 1)
## plot
plot(gre, outcome)
cor(gre, outcome)
cor(gre[admit == 1], outcome[admit == 1])
## Data frame
df <- data.frame(gre, total, admit, p, outcome)
## Overall
ggplot(df, aes(gre, outcome)) +
geom_point(alpha = 0.3)+
geom_smooth(method = 'lm') +
haschaR::theme_hanno()
# Install ggplot2 if not installed
# install.packages("ggplot2")
# Load ggplot2 package
library(ggplot2)
# Generate synthetic data
set.seed(123)
n <- 500
## preparation
p <- rnorm(n, 0, 1)
## gre
gre <- sample(130:170, n, replace = T)
## standardize gre
gre_scaled <- (gre - mean(gre)) / sd(gre)
## add together
total = gre_scaled + p
admit = (total > quantile(total, 0.75))
outcome = gre_scaled + p + rnorm(n, 0, 1)
## plot
plot(gre, outcome)
cor(gre, outcome)
cor(gre[admit == 1], outcome[admit == 1])
## Data frame
df <- data.frame(gre, total, admit, p, outcome)
## Overall
ggplot(df, aes(gre, outcome)) +
geom_point(alpha = 0.3)+
geom_smooth(method = 'lm') +
haschaR::theme_hanno()
## Plot
ggplot(df, aes(gre, outcome, admit)) +
geom_point(aes(color = admit)) +
geom_smooth(method = 'lm', aes(group = admit))
ggplot(df, aes(gre, outcome)) +
geom_point(alpha = 0.3)+
geom_smooth(method = 'lm') +
haschaR::theme_hanno()
ggplot(df, aes(gre, outcome, admit)) +
geom_point(aes(color = admit)) +
geom_smooth(method = 'lm', aes(group = admit))
ggplot(df, aes(gre, outcome, admit)) +
geom_point(aes(color = admit)) +
geom_smooth(method = 'lm', aes(group = admit))
ggplot(df, aes(gre, outcome)) +
geom_point(alpha = 0.3)+
geom_smooth(method = 'lm') +
haschaR::theme_hanno()
ggplot() +
geom_point(data = df[df$admit == 1,], alpha = 0.3, aes(gre, outcome))+
geom_smooth(data = df[df$admit == 1,], aes(gre, outcome), method = 'lm') +
haschaR::theme_hanno()
ggplot() +
geom_point(data = df[df$admit == 0,], alpha = 0.1, aes(gre, outcome))+
geom_point(data = df[df$admit == 1,], alpha = 0.3, aes(gre, outcome))+
geom_smooth(data = df[df$admit == 1,], aes(gre, outcome), method = 'lm') +
haschaR::theme_hanno()
ggplot() +
geom_point(data = df[df$admit == 0,], alpha = 0.1, aes(gre, outcome),
color = "seagreen")+
geom_point(data = df[df$admit == 1,], alpha = 0.3, aes(gre, outcome))+
geom_smooth(data = df[df$admit == 1,], aes(gre, outcome), method = 'lm') +
haschaR::theme_hanno()
ggplot() +
geom_point(data = df[df$admit == 0,], alpha = 0.1, aes(gre, outcome),
color = "seagreen")+
geom_point(data = df[df$admit == 1,], alpha = 0.3, aes(gre, outcome),
color = "blue")+
geom_smooth(data = df[df$admit == 1,], aes(gre, outcome), method = 'lm') +
haschaR::theme_hanno()
ggplot() +
geom_point(data = df[df$admit == 0,], alpha = 0.3, aes(gre, outcome),
color = "seagreen")+
geom_point(data = df[df$admit == 1,], alpha = 0.3, aes(gre, outcome),
color = "blue")+
geom_smooth(data = df[df$admit == 1,], aes(gre, outcome), method = 'lm') +
haschaR::theme_hanno()
ggplot(df, aes(gre, outcome)) +
geom_point(alpha = 0.3, color = "seagreen")+
geom_smooth(method = 'lm') +
haschaR::theme_hanno()
ggplot(df, aes(gre, outcome)) +
geom_point(alpha = 0.3, color = "seagreen")+
geom_smooth(method = 'lm', color = "seagreen") +
haschaR::theme_hanno()
ggplot(df, aes(gre, outcome)) +
geom_point(alpha = 0.3, color = "seagreen")+
geom_smooth(method = 'lm', color = "seagreen") +
haschaR::theme_hanno() +
ggtitle("Across all applicants")
ggplot(df, aes(gre, p, admit)) +
geom_point(color = admit)
ggplot(df, aes(gre, p, admit)) +
geom_point(color = admit)
ggplot(df, aes(gre, p, admit)) +
geom_point(aes(color = admit))
# Install ggplot2 if not installed
# install.packages("ggplot2")
# Load ggplot2 package
library(ggplot2)
# Generate synthetic data
set.seed(123)
n <- 500
p <- rnorm(n, 0, 1)
sat <- sample(700:1600, n, replace = T)
sat_scaled <- (sat - mean(sat)) / sd(sat)
total = sat_scaled + p
admit = (total > quantile(total, 0.75))
outcome = sat_scaled + p + rnorm(n, 0, 1)
plot(sat, outcome)
sat_scaled + p + rnorm(n, 0, 1)
var(sat)
var(sat_scaled)
wages = pnorm(outcome, mean = 80000, sd = 20000)
wages
wages = dnorm(outcome, mean = 80000, sd = 20000)
wages
outcome
outcome
hist(outcome)
wages = qnorm(outcome, mean = 80000, sd = 20000)
qnorm
wages = (outcome*20000)+80000
wages
hist(wages)
outcome = outcome / sd(outcome)
wages = (outcome*20000)+80000
wages
hist(wages)
plot(sat, wages)
cor(sat, wages)
cor(sat[admit == 1], wages[admit == 1])
df <- data.frame(sat, total, admit, p, wages)
ggplot(df, aes(sat, p, admit)) +
geom_point(aes(color = admit))
ggplot(df, aes(sat, p, admit)) +
geom_point(aes(color = admit)) +
scale_color_manual(values = c("blue", "seagreen"))
ggplot(df, aes(sat, p, admit)) +
geom_point(aes(color = admit)) +
scale_color_manual(values = c("blue", "seagreen"), labesl = c("Not admitted",
"Admitted"))
ggplot(df, aes(sat, p, admit)) +
geom_point(aes(color = admit)) +
scale_color_manual(values = c("blue", "seagreen"), labels = c("Not admitted",
"Admitted"))
ggplot(df, aes(sat, p, admit)) +
geom_point(aes(color = admit)) +
scale_color_manual(values = c("blue", "seagreen"), labels = c("Not admitted",
"Admitted"),
name = "")
library(haschaR)
ggplot(df, aes(sat, p, admit)) +
geom_point(aes(color = admit)) +
scale_color_manual(values = c("blue", "seagreen"), labels = c("Not admitted",
"Admitted"),
name = "") +
theme_hanno() +
theme(legend.position = "bottom")
ggplot(df, aes(sat, p, admit)) +
geom_point(aes(color = admit)) +
scale_color_manual(values = c("blue", "seagreen"), labels = c("Not admitted",
"Admitted"),
name = "") +
theme_hanno() +
theme(legend.position = "bottom") +
xlab("SAT") + ylab("Other components of the application")
ggplot(df, aes(sat, p, admit)) +
geom_point(aes(color = admit)) +
scale_color_manual(values = c("blue", "seagreen"), labels = c("Not admitted",
"Admitted"),
name = "") +
theme_hanno() +
theme(legend.position = "bottom") +
xlab("SAT") + ylab("Other components\nof the application")
ggplot(df, aes(sat, outcome)) +
geom_point(alpha = 0.3, color = "seagreen")+
geom_smooth(method = 'lm', color = "seagreen") +
haschaR::theme_hanno() +
ggtitle("Across all applicants")
ggplot() +
geom_point(data = df[df$admit == 0,], alpha = 0.3, aes(gre, outcome),
color = "seagreen")+
geom_point(data = df[df$admit == 1,], alpha = 0.3, aes(gre, outcome),
color = "blue")+
geom_smooth(data = df[df$admit == 1,], aes(gre, outcome), method = 'lm') +
haschaR::theme_hanno()
ggplot() +
geom_point(data = df[df$admit == 0,], alpha = 0.3, aes(sat, wages),
color = "seagreen")+
geom_point(data = df[df$admit == 1,], alpha = 0.3, aes(sat, wages),
color = "blue")+
geom_smooth(data = df[df$admit == 1,], aes(sat, wages), method = 'lm') +
haschaR::theme_hanno()
ggplot() +
geom_point(data = df[df$admit == 1,], alpha = 0.3, aes(sat, wages),
color = "seagreen")+
geom_point(data = df[df$admit == 0,], alpha = 0.3, aes(sat, wages),
color = "blue")+
geom_smooth(data = df[df$admit == 1,], aes(sat, wages), method = 'lm') +
haschaR::theme_hanno()
ggplot() +
geom_point(data = df[df$admit == 1,], alpha = 0.3, aes(sat, wages),
color = "seagreen")+
geom_point(data = df[df$admit == 0,], alpha = 0.3, aes(sat, wages),
color = "blue")+
geom_smooth(data = df[df$admit == 0,], aes(sat, wages), method = 'lm') +
haschaR::theme_hanno()
ggplot() +
geom_point(data = df[df$admit == 1,], alpha = 0.3, aes(sat, wages),
color = "seagreen")+
geom_point(data = df[df$admit == 0,], alpha = 0.3, aes(sat, wages),
color = "blue")+
geom_smooth(data = df[df$admit == 0,], aes(sat, wages), method = 'lm',
color = "seagreen") +
geom_smooth(data = df[df$admit == 1,], aes(sat, wages), method = 'lm') +
haschaR::theme_hanno()
# Install ggplot2 if not installed
# install.packages("ggplot2")
# Load ggplot2 package
library(ggplot2)
library(haschaR)
# Generate synthetic data
set.seed(123)
n <- 500
## preparation
p <- rnorm(n, 0, 1)
## gre
sat <- sample(700:1600, n, replace = T)
## standardize sat
sat_scaled <- (sat - mean(sat)) / sd(sat)
## add together
total = sat_scaled + p
admit = (total > quantile(total, 0.75))
outcome = sat_scaled + p + rnorm(n, 0, 1)
outcome = outcome / sd(outcome)
wages = (outcome*20000)+80000
## plot
plot(sat, wages)
cor(sat, wages)
cor(sat[admit == 1], wages[admit == 1])
## Data frame
df <- data.frame(sat, total, admit, p, wages)
## admission
ggplot(df, aes(sat, p, admit)) +
geom_point(aes(color = admit)) +
scale_color_manual(values = c("blue", "seagreen"), labels = c("Not admitted",
"Admitted"),
name = "") +
theme_hanno() +
theme(legend.position = "bottom") +
xlab("SAT") + ylab("Other components\nof the application")
## Overall
ggplot(df, aes(sat, outcome)) +
geom_point(alpha = 0.3, color = "seagreen")+
geom_smooth(method = 'lm', color = "seagreen") +
haschaR::theme_hanno() +
ggtitle("Across all applicants")
ggplot(df, aes(sat, wages)) +
geom_point(alpha = 0.3, color = "seagreen")+
geom_smooth(method = 'lm', color = "seagreen") +
haschaR::theme_hanno() +
ggtitle("Across all applicants") +
xlab("SAT") + ylab("Income after college")
ggplot(df, aes(sat, wages)) +
geom_point(alpha = 0.3, color = "black")+
geom_smooth(method = 'lm', color = "grey40") +
haschaR::theme_hanno() +
ggtitle("Across all applicants") +
xlab("SAT") + ylab("Income after college")
ggplot(df, aes(sat, wages)) +
geom_point(alpha = 0.3, color = "black")+
geom_smooth(method = 'lm', color = "grey60") +
haschaR::theme_hanno() +
ggtitle("Across all applicants") +
xlab("SAT") + ylab("Income after college")
ggplot() +
geom_point(data = df[df$admit == 1,], alpha = 0.3, aes(sat, wages),
color = "seagreen")+
geom_point(data = df[df$admit == 0,], alpha = 0.3, aes(sat, wages),
color = "blue")+
geom_smooth(data = df[df$admit == 0,], aes(sat, wages), method = 'lm',) +
geom_smooth(data = df[df$admit == 1,], aes(sat, wages), method = 'lm') +
haschaR::theme_hanno()
ggplot() +
geom_point(data = df[df$admit == 1,], alpha = 0.3, aes(sat, wages),
color = "seagreen")+
geom_point(data = df[df$admit == 0,], alpha = 0.3, aes(sat, wages),
color = "blue")+
geom_smooth(data = df[df$admit == 0,], aes(sat, wages), method = 'lm',
color = "blue") +
geom_smooth(data = df[df$admit == 1,], aes(sat, wages), method = 'lm',
color = "seagreen") +
haschaR::theme_hanno()
ggplot() +
geom_point(data = df[df$admit == 1,], alpha = 0.3, aes(sat, wages),
color = "seagreen")+
geom_point(data = df[df$admit == 0,], alpha = 0.3, aes(sat, wages),
color = "blue")+
geom_smooth(data = df[df$admit == 1,], aes(sat, wages), method = 'lm',
color = "seagreen") +
haschaR::theme_hanno()
devtools::install_github('hhilbig/haschaR',
upgrade = T, force = T, quiet = T)
##
haschaR::tidy_feols_single()
haschaR::tidy_feols_single
library(devtools)
library(roxygen2)
rm(list = ls())
## Declare WDs
wd_h <- '~/Documents/GitHub/haschaR/'
wd_s <- '/Users/saschariaz_1/Dropbox\ (Nuffield\ College)/07_Git/haschaR'
## Set WD
haschaR::detect_wd(wd_h = wd_h, wd_alt = wd_s, user_name = 'hanno',
wd_h2 = wd_h2)
## For some reasons some dependencies are not installed w/ the package
## This should fix this:
use_package("lfe")
use_package("stringdist")
use_package("stringr")
use_package("ggplot2")
use_package("dplyr")
use_package("fixest")
use_package("broom")
use_package("rdrobust")
use_package("clipr")
use_package("grDevices")
use_package("glue")
use_package("magick")
use_package("pdftools")
use_package("png")
document()
## PUSH BEFORE REINSTALLING
devtools::install_github('hhilbig/haschaR',
upgrade = T, force = T, quiet = T)
## PUSH BEFORE REINSTALLING
devtools::install_github('hhilbig/haschaR',
upgrade = T, force = T, quiet = T)
##
haschaR::tidy_feols()
haschaR::tidy_feols
haschaR::tidy_feols_singlwe
haschaR::tidy_feols_single

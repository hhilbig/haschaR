m3 <- felm(f3, data = ols_df)
mlist <- list(m1, m2, m3)
n_list <- mlist %>% sapply(function(x) length(x$residuals))
n_list
out_df_ols <- list(m1, m2, m3) %>%
lapply(broom::tidy, conf.int = T) %>% reduce(rbind) %>%
filter(str_detect(term, 'treated')) %>%
mutate(outcome = o, method = c('OLS', 'OLS w/ State FE',
'OLS w/ County FE'),
n = n_list, bw = bw_ols,
exclude_state = ifelse(exclude_state,
'State excluded', 'All states'))
## Combine and return
out_full <- bind_rows(out_df_rdd, out_df_ols)
out_full
## OLS with full sample
ols_df <- data %>%
filter(between(pop_dec_09, 10000 - bw_ols, 10000 + bw_ols))
f1 <- paste(o, '~treated | 0 | 0 | 0 ') %>% as.formula()
f2 <- paste(o, '~treated | state | 0 | 0 ') %>% as.formula()
f3 <- paste(o, '~treated | county | 0 | 0 ') %>% as.formula()
f4 <- paste(o, '~treated | county + pid | 0 | 0 ') %>% as.formula()
m1 <- felm(f1, data = ols_df)
m2 <- felm(f2, data = ols_df)
m3 <- felm(f3, data = ols_df)
m4 <- felm(f4, data = ols_df)
mlist <- list(m1, m2, m3, m4)
n_list <- mlist %>% sapply(function(x) length(x$residuals))
out_df_ols <- list(m1, m2, m3, m4) %>%
lapply(broom::tidy, conf.int = T) %>% reduce(rbind) %>%
filter(str_detect(term, 'treated')) %>%
mutate(outcome = o, method = c('OLS', 'OLS w/ State FE',
'OLS w/ County FE',
'OLS w/ County FE + PID'),
n = n_list, bw = bw_ols,
exclude_state = ifelse(exclude_state,
'State excluded', 'All states'))
out_df_ols
## Combine and return
out_full <- bind_rows(out_df_rdd, out_df_ols)
results <- function(o, data = civey,
exclude_state = T,
bw_ols = 5000) {
## Prep
if (exclude_state) {
data <- data[!data$state == '08', ]
}
## Complete obs
data <- data[complete.cases(data[, c(o, 'pop_dec_09', 'treated')]), ]
## RDD w/o covars
out <- rdrobust(y = data %>% pull(!!o),
x = data$runvar,
c = 0)
## Return this : Robust B-C SE
out_df_rdd <- data.frame(estimate = out$coef[1], std.error = out$se[3],
outcome = o) %>%
mutate(conf.low = out$ci[3, 1],
conf.high = out$ci[3, 2],
p.value = out$pv[3],
bw = out$bws[1,1],
bw_bias = out$bws[2,1],
n = sum(out$N_h),
exclude_state = ifelse(exclude_state,
'State excluded', 'All states'),
method = 'RDD R-BC')
## OLS with full sample
ols_df <- data %>%
filter(between(pop_dec_09, 10000 - bw_ols, 10000 + bw_ols))
f1 <- paste(o, '~treated | 0 | 0 | 0 ') %>% as.formula()
f2 <- paste(o, '~treated | state | 0 | 0 ') %>% as.formula()
f3 <- paste(o, '~treated | county | 0 | 0 ') %>% as.formula()
f4 <- paste(o, '~treated | county + pid | 0 | 0 ') %>% as.formula()
m1 <- felm(f1, data = ols_df)
m2 <- felm(f2, data = ols_df)
m3 <- felm(f3, data = ols_df)
m4 <- felm(f4, data = ols_df)
mlist <- list(m1, m2, m3, m4)
n_list <- mlist %>% sapply(function(x) length(x$residuals))
## Return
out_df_ols <- list(m1, m2, m3, m4) %>%
lapply(broom::tidy, conf.int = T) %>% reduce(rbind) %>%
filter(str_detect(term, 'treated')) %>%
mutate(outcome = o, method = c('OLS', 'OLS w/ State FE',
'OLS w/ County FE',
'OLS w/ County FE + PID'),
n = n_list, bw = bw_ols,
exclude_state = ifelse(exclude_state,
'State excluded', 'All states'))
## Combine and return
out_full <- bind_rows(out_df_rdd, out_df_ols)
out_full
}
out_res <- outcomes %>%
pblapply(results, exclude_state = T, bw_ols = 5000) %>%
reduce(rbind)
library(haschaR)
p1 <- ggplot(out_res, aes(method, estimate)) +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
width = 0) +
geom_point(shape = 21, fill = 'white') +
xlab('') + ylab('') +
theme_hanno() +
facet_wrap(~ outcome)
p1
p1 <- ggplot(out_res, aes(method, estimate)) +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
width = 0) +
geom_point(shape = 21, fill = 'white') +
xlab('') + ylab('') +
theme_hanno() +
facet_wrap(~ outcome) +
coord_flip()
p1
table(civey$year)
rm(list = ls())
##
civey <- read_rds('Data/11_Civey_new/Civey_Clean.rds') %>%
ungroup() %>%
mutate(state = substr(ags, 1, 2)) %>%
filter(!is.na(ags) | !is.na(treated)) %>%
mutate(runvar = 10000 - pop_dec_09) %>%
filter(applies_census == 1)
## Replies by study
outcomes <- c("state_invest_too_much_infrastr", "water_utilities_private_prov",
"state_invest_enough_future", "budget_surplus_surplus_cut_tax",
"budget_surplus_surplus_invest", "budget_surplus_surplus_other",
"budget_surplus_surplus_pay_debt")
## This just gives an overview of vars by study
civey %>%
group_by(study) %>%
summarise_at(vars(all_of(outcomes)),
list(~sum(!is.na(.)))) %>%
pivot_longer(cols = -study) %>%
filter(!value == 0)
## Looks good
results <- function(o, data = civey,
exclude_state = T,
bw_ols = 5000) {
## Prep
if (exclude_state) {
data <- data[!data$state == '08', ]
}
## Complete obs
data <- data[complete.cases(data[, c(o, 'pop_dec_09', 'treated')]), ]
## RDD w/o covars
out <- rdrobust(y = data %>% pull(!!o),
x = data$runvar,
c = 0)
## Return this : Robust B-C SE
out_df_rdd <- data.frame(estimate = out$coef[1], std.error = out$se[3],
outcome = o) %>%
mutate(conf.low = out$ci[3, 1],
conf.high = out$ci[3, 2],
p.value = out$pv[3],
bw = out$bws[1,1],
bw_bias = out$bws[2,1],
n = sum(out$N_h),
exclude_state = ifelse(exclude_state,
'State excluded', 'All states'),
method = 'RDD R-BC')
## OLS with full sample
ols_df <- data %>%
filter(between(pop_dec_09, 10000 - bw_ols, 10000 + bw_ols))
f1 <- paste(o, '~treated | 0 | 0 | 0 ') %>% as.formula()
f2 <- paste(o, '~treated | year + state | 0 | 0 ') %>% as.formula()
f3 <- paste(o, '~treated | year + county | 0 | 0 ') %>% as.formula()
f4 <- paste(o, '~treated | year + county + pid | 0 | 0 ') %>% as.formula()
m1 <- felm(f1, data = ols_df)
m2 <- felm(f2, data = ols_df)
m3 <- felm(f3, data = ols_df)
m4 <- felm(f4, data = ols_df)
mlist <- list(m1, m2, m3, m4)
n_list <- mlist %>% sapply(function(x) length(x$residuals))
## Return
out_df_ols <- list(m1, m2, m3, m4) %>%
lapply(broom::tidy, conf.int = T) %>% reduce(rbind) %>%
filter(str_detect(term, 'treated')) %>%
mutate(outcome = o, method = c('OLS', 'OLS w/ State FE',
'OLS w/ County FE',
'OLS w/ County FE + PID'),
n = n_list, bw = bw_ols,
exclude_state = ifelse(exclude_state,
'State excluded', 'All states'))
## Combine and return
out_full <- bind_rows(out_df_rdd, out_df_ols)
out_full
}
## Do for all outcomes
out_res <- outcomes %>%
pblapply(results, exclude_state = T, bw_ols = 5000) %>%
reduce(rbind)
## Plot
p1 <- ggplot(out_res, aes(method, estimate)) +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
width = 0) +
geom_point(shape = 21, fill = 'white') +
xlab('') + ylab('') +
theme_hanno() +
facet_wrap(~ outcome) +
coord_flip()
p1
p1 <- ggplot(out_res, aes(method, estimate)) +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
width = 0) +
geom_point(shape = 21, fill = 'white') +
xlab('') + ylab('') +
theme_hanno() +
facet_wrap(~ outcome, scales = 'free_y') +
coord_flip()
p1
p1 <- ggplot(out_res, aes(method, estimate)) +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
width = 0) +
geom_point(shape = 21, fill = 'white') +
xlab('') + ylab('') +
theme_hanno() +
facet_wrap(~ outcome, scales = 'free_x') +
coord_flip()
p1
#' This is my ggplot theme
#'
#' @param fontsize Selecte fontsize, default is 15
#' @param font Selected font. Either 'default' or 'frutiger'.
#' @return This is a custom ggplot theme. You can change the font size and the font family.
#' @import ggplot2 grDevices
#' @export
#' @examples
#' ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
#' geom_point() +
#' theme_hanno(fontsize = 15, font = 'frutiger')
#'
#'
## theme hanno function
theme_hanno <- function(fontsize = 15, font = 'default') {
## Check if selected font exists
if (!(font %in% c('default', 'frutiger'))) {
stop('Change font argument to <default> or <frutiger>')
} else {
if (font == 'frutiger') {
cat('Frutiger font needs to be installed for this to work\n')
cat('Caution: This might not work on a Mac')
windowsFonts("Frutiger-Light" = windowsFont("Frutiger-Light"))
## Do theme
ggplot2::theme_bw() + ggplot2::theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = fontsize,
family = "Frutiger-Light"))
} else {
ggplot2::theme_bw() + ggplot2::theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = fontsize))
}
}
}
theme_hanno <- function(fontsize = 15) {
ggplot2::theme_bw() +
ggplot2::theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = fontsize))
}
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
theme_hanno(fontsize = 15)
iris
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
theme_hanno(fontsize = 15) %>%
facet_wrap(~Species)
iris
iris <- iris
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width)) +
geom_point() +
theme_hanno(fontsize = 15) %>%
facet_wrap(~Species)
theme_hanno <- function(fontsize = 15) {
ggplot2::theme_bw() +
ggplot2::theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = fontsize))
}
theme_hanno2 <- function(fontsize = 15) {
ggplot2::theme_minimal() +
ggplot2::theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = fontsize))
}
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width)) +
geom_point() +
theme_hanno2(fontsize = 15)
theme_hanno2 <- function(fontsize = 15) {
ggplot2::theme_minimal() +
ggplot2::theme(text = element_text(size = fontsize))
}
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width)) +
geom_point() +
theme_hanno2(fontsize = 15)
ggplot2::theme_light() +
ggplot2::theme(text = element_text(size = fontsize))
theme_hanno2 <- function(fontsize = 15) {
ggplot2::theme_light() +
ggplot2::theme(text = element_text(size = fontsize))
}
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width)) +
geom_point() +
theme_hanno2(fontsize = 15)
ggplot2::theme_light() +
ggplot2::theme(text = element_text(size = fontsize),
panel.grid.major = element_blank())
theme_hanno2 <- function(fontsize = 15) {
ggplot2::theme_light() +
ggplot2::theme(text = element_text(size = fontsize),
panel.grid.major = element_blank())
}
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width)) +
geom_point() +
theme_hanno2(fontsize = 15)
theme_hanno2 <- function(fontsize = 15) {
ggplot2::theme_light() +
ggplot2::theme(text = element_text(size = fontsize),
minor = element_blank())
}
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width)) +
geom_point() +
theme_hanno2(fontsize = 15)
ggplot2::theme_light() +
ggplot2::theme(text = element_text(size = fontsize),
panel.grid.minor = element_blank())
theme_hanno2 <- function(fontsize = 15) {
ggplot2::theme_light() +
ggplot2::theme(text = element_text(size = fontsize),
panel.grid.minor = element_blank())
}
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width)) +
geom_point() +
theme_hanno2(fontsize = 15)
ggplot2::theme_light() +
ggplot2::theme(text = element_text(size = fontsize),
panel.grid.minor = element_blank(),)
theme_hanno2 <- function(fontsize = 15) {
ggplot2::theme_light() +
ggplot2::theme(text = element_text(size = fontsize),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
,
panel.grid.minor = element_blank()}
theme_hanno2 <- function(fontsize = 15) {
ggplot2::theme_light() +
ggplot2::theme(text = element_text(size = fontsize),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
}
theme_hanno2 <- function(fontsize = 15) {
ggplot2::theme_light() +
ggplot2::theme(text = element_text(size = fontsize),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
}
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width)) +
geom_point() +
theme_hanno2(fontsize = 15)
theme_hanno2 <- function(fontsize = 15) {
ggplot2::theme_minimal() +
ggplot2::theme(text = element_text(size = fontsize),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
}
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width)) +
geom_point() +
theme_hanno2(fontsize = 15)
theme_hanno2 <- function(fontsize = 15) {
ggplot2::theme_minimal() +
ggplot2::theme(text = element_text(size = fontsize),
panel.grid.major = element_blank())
}
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width)) +
geom_point() +
theme_hanno2(fontsize = 15)
theme_hanno2 <- function(fontsize = 15) {
ggplot2::theme_few() +
ggplot2::theme(text = element_text(size = fontsize),
panel.grid.major = element_blank())
}
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width)) +
geom_point() +
theme_hanno2(fontsize = 15)
theme_hanno <- function(fontsize = 15, font = 'default',
facet_alt = F) {
th <- ggplot2::theme_bw() +
ggplot2::theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = fontsize))
if (facet_alt) {
th <- th +
theme(strip.background =element_rect(fill="none"))+
theme(strip.text = element_text(colour = 'black'))
}
}
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
theme_hanno(fontsize = 15, facet_alt = T)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
theme_hanno(fontsize = 15, facet_alt = T) +
facet_wrap(~Species)
theme_hanno <- function(fontsize = 15, font = 'default',
facet_alt = F) {
th <- ggplot2::theme_bw() +
ggplot2::theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = fontsize))
if (facet_alt) {
th <- th +
theme(strip.background =element_rect(fill=NA))+
theme(strip.text = element_text(colour = 'black'))
}
}
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
theme_hanno(fontsize = 15, facet_alt = T) +
facet_wrap(~Species)
theme_minimal
theme_hanno <- function(fontsize = 15, font = 'default',
facet_alt = F) {
th <- ggplot2::theme_bw() +
ggplot2::theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = fontsize))
if (facet_alt) {
th <- th +
theme(strip.background =element_blank())+
theme(strip. = element_text(colour = 'black'))
}
}
#' This is my ggplot theme
#'
#' @param fontsize Selecte fontsize, default is 15
#' @param facet_alt Facet strips with white BG
#' @return This is a custom ggplot theme. You can change the font size and the font family.
#' @import ggplot2 grDevices
#' @export
#' @examples
#' ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
#' geom_point() +
#' theme_hanno(fontsize = 15)
#'
#'
## theme hanno function
theme_hanno <- function(fontsize = 15,
facet_alt = F) {
th <- ggplot2::theme_bw() +
ggplot2::theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = fontsize))
if (facet_alt) {
th <- th +
theme(strip.background =element_blank())+
theme(strip. = element_text(colour = 'black'))
}
}
#' This is my ggplot theme
#'
#' @param fontsize Selecte fontsize, default is 15
#' @param facet_alt Facet strips with white BG
#' @return This is a custom ggplot theme. You can change the font size and the font family.
#' @import ggplot2 grDevices
#' @export
#' @examples
#' ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
#' geom_point() +
#' theme_hanno(fontsize = 15)
#'
#'
## theme hanno function
theme_hanno <- function(fontsize = 15,
facet_alt = F) {
th <- ggplot2::theme_bw() +
ggplot2::theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = fontsize))
if (facet_alt) {
th <- th +
theme(strip.background =element_blank())+
theme(strip. = element_text(colour = 'black'))
}
th
}
library(devtools)
library(roxygen2)
## Declare WDs
wd_h <- '/Users/hanno/Local_Projects/haschaR/'
wd_s <- '/Users/saschariaz/Google\ Drive_Harvard/Git/haschaR'
## Set WD
haschaR::detect_wd(wd_h = wd_h, wd_alt = wd_s, user_name = 'Hanno')
document()
devtools::install_github('https://github.com/hhilbig/haschaR', force = T)
haschaR::add_linebreak()
